## DO NOT EDIT THIS file
.DEFAULT_GOAL := help
.EXPORT_ALL_VARIABLES:

SHELL := /bin/bash

# Check if ARTIFACTORY_USER and ARTIFACTORY_PWD are set in the environment.
ARTIFACTORY_USER ?= $(error Please set ARTIFACTORY_USER and ARTIFACTORY_PWD for logging into Docker/Artifactory)
ARTIFACTORY_PWD ?= $(error Please set ARTIFACTORY_USER and ARTIFACTORY_PWD for logging into Docker/Artifactory)


##@ General

# The help target prints out all targets with their descriptions organized
# beneath their categories. The categories are represented by '##@' and the
# target descriptions by '##'. The awk commands is responsible for reading the
# entire set of makefiles included in this invocation, looking for lines of the
# file as xyz: ## something, and then pretty-format the target and help. Then,
# if there's a line with ##@ something, that gets pretty-printed as a category.
# More info on the usage of ANSI control characters for terminal formatting:
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
# More info on the awk command:
# http://linuxcommand.org/lc3_adv_awk.php

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)


##@ Python Development

PYPI_REPO := pypi-virtual
PWD=$(shell pwd)

PYTHON_SOURCE_DIRS := src tests
PYTHON_COVERAGE_DIRS := src
TARGET_COVERAGE_DIR := dist

.PHONY: python-init
python-init: ## Initialize your python environment using poetry
	@echo "==> Creating virtual environment in ...$(PWD)"
	python --version
	cd $(PWD) && poetry env use python
	@echo "==> Installing project into the virtual environment ..."
	poetry install --verbose

.PHONY: python-update
python-update: ## Updates your python environment using poetry
	@echo "==> Updating Python dependencies ..."
	poetry update

.PHONY: python-format
python-format: ## Formats you python code
	@echo "==> Formatting Python code ..."
	poetry run isort $(PYTHON_SOURCE_DIRS)
	poetry run black $(PYTHON_SOURCE_DIRS)

.PHONY: python-lint
python-lint: ## Runs the linter
	@echo "==> Linting Python code ..."
	poetry run isort --check-only $(PYTHON_SOURCE_DIRS)
	poetry run black --verbose --check --diff $(PYTHON_SOURCE_DIRS)
	poetry run flake8 --jobs 1 --statistics $(PYTHON_SOURCE_DIRS)
	poetry run mypy --strict $(PYTHON_SOURCE_DIRS) --no-namespace-packages
	poetry run pylint --jobs 1 --rcfile=setup.cfg $(PYTHON_SOURCE_DIRS)

.PHONY: python-test
python-test: python-lint ## Run your tests applying also the linter
	@echo "==> Testing Python code ..."
	poetry run pytest -vv \
		--cov=$(shell echo "$(PYTHON_COVERAGE_DIRS)" | sed 's/ /,/g') \
		--cov-report=term \
		--cov-report=html:$(TARGET_COVERAGE_DIR)/html \
		--cov-report=xml:$(TARGET_COVERAGE_DIR)/coverage.xml

.PHONY: python-build
python-build: ## Build your code and creates a wheel
	@echo "==> Building Python wheel ..."
	pip install poetry-dynamic-versioning
	poetry build -f wheel


##@ Setup

ARTIFACTORY_CONTEXT ?= https://artifactory.mpi-internal.com/artifactory
ARTIFACTORY_DOCKER_REGISTRY ?= containers.mpi-internal.com
POETRY_REPOSITORY_NAME ?= adevinta
DOCKERHUB_ARTIFACTORY_DOCKER_REGISTRY ?= dockerhub.containers.mpi-internal.com

PHONY: init
init: git-init artifactory-config docker-login python-init components-python-init  ## Runs all the init steps listed below

PHONY: git-init
git-init:  ## Initializes the Git repository locally (if not present yet)
	git init ../
	if [[ $$( git log --oneline -5 2>/dev/null | wc -l ) -eq 0 ]]; then git add . && git commit -m 'Initial commit'; fi

.PHONY: artifactory-config
artifactory-config: ## Configures Poetry to use Adevinta's Artifactory
	@echo "Configuring the Python Artifactory repository '$(POETRY_REPOSITORY_NAME)' for the user $(ARTIFACTORY_USER) ..."
	$(call check_defined, ARTIFACTORY_USER)
	$(call check_defined, ARTIFACTORY_PWD)
	poetry config repositories.$(POETRY_REPOSITORY_NAME) "$(ARTIFACTORY_CONTEXT)/api/pypi/pypi-virtual"
	poetry config http-basic.$(POETRY_REPOSITORY_NAME) "$(ARTIFACTORY_USER)" "$(ARTIFACTORY_PWD)"
	poetry config --list

.PHONY: docker-login
docker-login: ## Logs Docker into Adevinta's Artifactory Docker registry
	$(call check_defined, ARTIFACTORY_USER)
	$(call check_defined, ARTIFACTORY_PWD)
	docker login --username=$(ARTIFACTORY_USER) --password=$(ARTIFACTORY_PWD) $(ARTIFACTORY_DOCKER_REGISTRY)
	docker login --username=$(ARTIFACTORY_USER) --password=$(ARTIFACTORY_PWD) $(DOCKERHUB_ARTIFACTORY_DOCKER_REGISTRY)
